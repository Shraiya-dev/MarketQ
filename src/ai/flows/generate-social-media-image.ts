// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Image generation AI agent for social media posts.
 *
 * - generateSocialMediaImage - A function that handles the image generation process.
 * - GenerateSocialMediaImageInput - The input type for the generateSocialMediaImage function.
 * - GenerateSocialMediaImageOutput - The return type for the generateSocialMediaImage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateSocialMediaImageInputSchema = z.object({
  title: z.string().describe('The title of the social media post.'),
  description: z.string().describe('The description of the social media post.'),
});
export type GenerateSocialMediaImageInput = z.infer<
  typeof GenerateSocialMediaImageInputSchema
>;

const GenerateSocialMediaImageOutputSchema = z.object({
  imageUrl: z
    .string()
    .describe(
      'The URL of the generated image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' 
    ),
});
export type GenerateSocialMediaImageOutput = z.infer<
  typeof GenerateSocialMediaImageOutputSchema
>;

export async function generateSocialMediaImage(
  input: GenerateSocialMediaImageInput
): Promise<GenerateSocialMediaImageOutput> {
  return generateSocialMediaImageFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateSocialMediaImagePrompt',
  input: {schema: GenerateSocialMediaImageInputSchema},
  output: {schema: GenerateSocialMediaImageOutputSchema},
  prompt: `Generate a relevant image based on the title and description of the social media post.
Title: {{{title}}}
Description: {{{description}}}`,
});

const generateSocialMediaImageFlow = ai.defineFlow(
  {
    name: 'generateSocialMediaImageFlow',
    inputSchema: GenerateSocialMediaImageInputSchema,
    outputSchema: GenerateSocialMediaImageOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: `${input.title} ${input.description}`,
      config: {responseModalities: ['TEXT', 'IMAGE']},
    });
    return {imageUrl: media.url!};
  }
);
